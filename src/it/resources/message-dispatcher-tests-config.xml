<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
    xmlns:test="http://www.mulesoft.org/schema/mule/test" xmlns:spring="http://www.springframework.org/schema/beans"
    xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
       http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <amqp:connector name="amqpConnector" virtualHost="mule-test"
        username="mule" password="elum" />

    <amqp:connector name="activeOnlyAmqpConnector" virtualHost="mule-test"
        username="mule" password="elum" activeDeclarationsOnly="true" />

    <amqp:connector name="mandatoryAmqpConnector" virtualHost="mule-test"
        username="mule" password="elum" mandatory="true" />

    <amqp:connector name="externalFactoryAmqpConnector"
        connectionFactory-ref="rabbitMQConnectionFactory" />

    <spring:bean name="rabbitMQConnectionFactory" class="com.rabbitmq.client.ConnectionFactory">
        <spring:property name="username" value="mule" />
        <spring:property name="password" value="elum" />
        <spring:property name="virtualHost" value="mule-test" />
        <spring:property name="host" value="localhost" />
        <spring:property name="port" value="5672" />
    </spring:bean>


    <flow name="amqpExistingExchangeService">
        <vm:inbound-endpoint path="amqpExistingExchangeService.in">
            <!-- Carry a custom inbound property to the outbound scope so it is preserved in the rest of the message processing flow -->
            <copy-properties propertyName="customHeader" />
        </vm:inbound-endpoint>
        <!-- Dispatch to an existing exchange -->
        <amqp:outbound-endpoint exchangeName="amqpExistingExchangeService-exchange"
            connector-ref="amqpConnector" />
    </flow>

    <flow name="amqpRedeclaredExistingExchangeService">
        <vm:inbound-endpoint path="amqpRedeclaredExistingExchangeService.in">
            <!-- Carry a custom inbound property to the outbound scope so it is preserved in the rest of the message processing flow -->
            <copy-properties propertyName="customHeader" />
        </vm:inbound-endpoint>
        <!-- Dispatch to an existing exchange re-declared in Mule to ensure presence -->
        <amqp:outbound-endpoint exchangeName="amqpRedeclaredExistingExchangeService-exchange"
            exchangeType="fanout" exchangeAutoDelete="false" exchangeDurable="false"
            connector-ref="amqpConnector" />
    </flow>

    <flow name="amqpNewExchangeService">
        <vm:inbound-endpoint path="amqpNewExchangeService.in" />
        <!-- Dispatch to a new exchange  -->
        <amqp:outbound-endpoint exchangeName="amqpNewExchangeService-exchange"
            exchangeType="fanout" exchangeAutoDelete="true" exchangeDurable="false"
            connector-ref="amqpConnector" />
    </flow>

    <flow name="amqpNewExchangeMultiStepService">
        <vm:inbound-endpoint path="amqpNewExchangeMultiStepService.in"
            exchange-pattern="one-way" />
        <all>
            <amqp:outbound-endpoint exchangeName="amqpNewExchangeMultiStepService-exchange"
                exchangeType="fanout" exchangeAutoDelete="true" exchangeDurable="false"
                connector-ref="amqpConnector" />

            <vm:outbound-endpoint path="amqpNewExchangeMultiStepService.out"
                exchange-pattern="one-way" />
        </all>
    </flow>

    <flow name="amqpLegacyDefaultExchangeService">
        <vm:inbound-endpoint path="amqpLegacyDefaultExchangeService.in">
            <!-- Carry a custom inbound property to the outbound scope so it is preserved in the rest of the message processing flow -->
            <copy-properties propertyName="customHeader" />
        </vm:inbound-endpoint>
        <!-- Dispatch to the default exchange  -->
        <amqp:outbound-endpoint exchangeName=""
            queueName="amqpLegacyDefaultExchangeService-queue" connector-ref="amqpConnector" />
    </flow>

    <amqp:endpoint name="amqpLegacyGlobalDefaultExchangeEndpoint"
        exchangeName="" queueName="amqpLegacyGlobalDefaultExchangeService-queue"
        connector-ref="amqpConnector" />

    <flow name="amqpLegacyGlobalDefaultExchangeService">
        <vm:inbound-endpoint path="amqpLegacyGlobalDefaultExchangeService.in">
            <!-- Carry a custom inbound property to the outbound scope so it is preserved in the rest of the message processing flow -->
            <copy-properties propertyName="customHeader" />
        </vm:inbound-endpoint>
        <!-- Dispatch to the default exchange  -->
        <outbound-endpoint ref="amqpLegacyGlobalDefaultExchangeEndpoint" />
    </flow>

    <flow name="amqpDefaultExchangeService">
        <vm:inbound-endpoint path="amqpDefaultExchangeService.in">
            <!-- Carry a custom inbound property to the outbound scope so it is preserved in the rest of the message processing flow -->
            <copy-properties propertyName="customHeader" />
        </vm:inbound-endpoint>
        <!-- Dispatch to the default exchange  -->
        <amqp:outbound-endpoint exchangeName="AMQP.DEFAULT.EXCHANGE"
            routingKey="amqpDefaultExchangeService-queue" connector-ref="amqpConnector" />
    </flow>

    <amqp:endpoint name="amqpGlobalDefaultExchangeEndpoint"
        exchangeName="AMQP.DEFAULT.EXCHANGE" routingKey="amqpGlobalDefaultExchangeService-queue"
        connector-ref="amqpConnector" />

    <flow name="amqpGlobalDefaultExchangeService">
        <vm:inbound-endpoint path="amqpGlobalDefaultExchangeService.in">
            <!-- Carry a custom inbound property to the outbound scope so it is preserved in the rest of the message processing flow -->
            <copy-properties propertyName="customHeader" />
        </vm:inbound-endpoint>
        <!-- Dispatch to the default exchange  -->
        <outbound-endpoint ref="amqpGlobalDefaultExchangeEndpoint" />
    </flow>


    <flow name="amqpMessageLevelOverrideService">
        <vm:inbound-endpoint path="amqpMessageLevelOverrideService.in">
            <!-- Carry a custom inbound property to the outbound scope so it is preserved in the rest of the message processing flow -->
            <copy-properties propertyName="customHeader" />
            <!-- Define message level overrides for exchange and routing key -->
            <set-property propertyName="exchange"
                value="amqpMessageLevelOverrideService-exchange" />
            <set-property propertyName="routing-key"
                value="amqpMessageLevelOverrideService-queue" />
        </vm:inbound-endpoint>
        <amqp:outbound-endpoint exchangeName="thisExchangeWillBeOverriden"
            connector-ref="activeOnlyAmqpConnector" />
    </flow>

    <flow name="amqpMelOutboundEndpointService">
        <vm:inbound-endpoint path="amqpMelOutboundEndpointService.in" />

        <!-- Carry a custom inbound property to the outbound scope so it is preserved in the rest of the message processing flow -->
        <copy-properties propertyName="customHeader" />

        <!-- Define flow variable to test MEL in endpoint -->
        <set-variable variableName="myExchangeName"
            value="amqpMelOutboundEndpointService-exchange" />

        <amqp:outbound-endpoint exchangeName="#[myExchangeName]"
            routingKey="#[message.inboundProperties.myRoutingKey]"
            connector-ref="activeOnlyAmqpConnector" />
    </flow>

    <flow name="amqpMandatoryDeliveryFailureNoHandler">
        <vm:inbound-endpoint path="amqpMandatoryDeliveryFailureNoHandler.in" />

        <!-- No queue is bound to this exchange so this should fail -->
        <amqp:outbound-endpoint exchangeName="amqpMandatoryDeliveryFailureNoHandler-exchange"
            connector-ref="mandatoryAmqpConnector" />
    </flow>

    <vm:endpoint name="returnedMessageChannel"
        path="amqpMandatoryDeliveryFailure.returnedMessages" />

    <flow name="amqpMandatoryDeliveryFailureWithHandler">
        <vm:inbound-endpoint path="amqpMandatoryDeliveryFailureWithHandler.in" />

        <amqp:return-handler>
            <vm:outbound-endpoint ref="returnedMessageChannel" />
        </amqp:return-handler>

        <!-- No queue is bound to this exchange so this should fail -->
        <amqp:outbound-endpoint
            exchangeName="amqpMandatoryDeliveryFailureWithHandler-exchange"
            connector-ref="mandatoryAmqpConnector" />
    </flow>

    <flow name="returnedMessageProcessor">
        <inbound-endpoint ref="returnedMessageChannel" />
        <test:component />
    </flow>

    <flow name="amqpMandatoryDeliverySuccess">
        <vm:inbound-endpoint path="amqpMandatoryDeliverySuccess.in">
            <!-- Carry a custom inbound property to the outbound scope so it is preserved in the rest of the message processing flow -->
            <copy-properties propertyName="customHeader" />
        </vm:inbound-endpoint>
        <!-- A queue is bound to this exchange so this should succeed -->
        <amqp:outbound-endpoint exchangeName="amqpMandatoryDeliverySuccess-exchange"
            connector-ref="mandatoryAmqpConnector" />
    </flow>


    <flow name="amqpRequestResponseService">
        <vm:inbound-endpoint path="amqpRequestResponseService.in"
            exchange-pattern="request-response">
            <!-- Carry a custom inbound property to the outbound scope so it is preserved in the rest of the message processing flow -->
            <copy-properties propertyName="customHeader" />
            <response>
                <message-properties-transformer
                    scope="outbound">
                    <add-message-property key="customHeader"
                        value="#[message.inboundProperties.customHeader]" />
                </message-properties-transformer>
            </response>
        </vm:inbound-endpoint>
        <!-- Send -->
        <amqp:outbound-endpoint exchange-pattern="request-response"
            exchangeName="amqpSendTargetService-exchange" exchangeType="fanout"
            exchangeAutoDelete="false" exchangeDurable="false" connector-ref="amqpConnector"
            responseTimeout="15000" />
    </flow>

    <flow name="amqpSendTargetService">
        <amqp:inbound-endpoint exchangeName="amqpSendTargetService-exchange"
            exchangeType="fanout" exchangeAutoDelete="false" exchangeDurable="false"
            queueName="amqpSendTargetService-queue" queueDurable="false"
            queueExclusive="false" queueAutoDelete="true" connector-ref="amqpConnector"
            exchange-pattern="request-response">
            <!-- Carry a custom inbound property to the outbound scope so it is preserved in the rest of the message processing flow -->
            <copy-properties propertyName="customHeader" />
        </amqp:inbound-endpoint>
        <test:component appendString="-response" />
    </flow>

    <flow name="amqpOutBoundQueue">
        <vm:inbound-endpoint path="amqpOutBoundQueue.in" />

        <amqp:outbound-endpoint exchangeName="amqpOutBoundQueue-exchange"
            exchangeType="fanout" queueName="amqpOutBoundQueue-queue"
            queueDurable="true" connector-ref="amqpConnector" />
    </flow>

    <flow name="amqpExternalFactoryConnector">
        <vm:inbound-endpoint path="amqpExternalFactoryConnector.in" />

        <amqp:outbound-endpoint exchangeName="amqpExternalFactoryConnector-exchange"
            exchangeType="fanout" connector-ref="externalFactoryAmqpConnector" />
    </flow>

    <amqp:endpoint name="amqpEndpointWithCustomArguments"
        exchangeName="amqpCustomArgumentsService-exchange" queueName="amqpCustomArgumentsService-queue"
        queueDurable="true" connector-ref="amqpConnector">
        <properties>
            <spring:entry key="amqp-queue.x-dead-letter-routing-key"
                value="dle" />
            <spring:entry key="amqp-queue.x-dead-letter-exchange"
                value="dlq" />
            <spring:entry key="amqp-queue.x-message-ttl">
                <spring:value type="java.lang.Long">5000</spring:value>
            </spring:entry>
        </properties>
    </amqp:endpoint>

    <flow name="amqpCustomArgumentsService">
        <vm:inbound-endpoint path="amqpCustomArgumentsService.in" />
        <outbound-endpoint ref="amqpEndpointWithCustomArguments" />
    </flow>

    <flow name="amqpEndpointWithCustomArgumentsMessageProcessor">
        <inbound-endpoint ref="amqpEndpointWithCustomArguments" />
        <test:component />
    </flow>
</mule>
