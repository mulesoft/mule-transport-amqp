<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp"
  xmlns:test="http://www.mulesoft.org/schema/mule/test"
  xmlns:spring="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

  <amqp:connector name="amqpAutoAckLocalhostConnector"
                  virtualHost="mule-test"
                  username="mule"
                  password="elum" />

  <amqp:connector name="amqpMuleAckLocalhostConnector"
                  virtualHost="mule-test"
                  username="mule"
                  password="elum"
                  ackMode="MULE_AUTO" />

  <amqp:connector name="amqpManualAckLocalhostConnector"
                  virtualHost="mule-test"
                  username="mule"
                  password="elum"
                  ackMode="MANUAL" />

  <amqp:connector name="amqpExclusiveLocalhostConnector"
                  virtualHost="mule-test"
                  username="mule"
                  password="elum"
                  exclusiveConsumers="true" />

  <flow name="amqpExistingQueueService">
    <!-- Use an existing queue -->
    <amqp:inbound-endpoint queueName="amqpExistingQueueService-queue"
                           connector-ref="amqpAutoAckLocalhostConnector" />
    <test:component />
  </flow>

  <flow name="amqpUnboundQueueService">
    <!-- Create a public unbound queue -->
    <amqp:inbound-endpoint queueName="amqpUnboundQueueService-queue"
                           queueDurable="true"
                           connector-ref="amqpAutoAckLocalhostConnector" />
    <test:component />
  </flow>

  <flow name="amqpServerNamedQueueExistingExchangeService">
    <!-- Create a private exclusive server-named queue and bind it to an existing exchange --> 
    <amqp:inbound-endpoint exchangeName="amqpServerNamedQueueExistingExchangeService-exchange"
                           connector-ref="amqpAutoAckLocalhostConnector" />
    <test:component />
  </flow>

  <flow name="amqpNewQueueExistingExchangeService">
    <!-- Create a new queue and bind it to an existing exchange  --> 
    <amqp:inbound-endpoint exchangeName="amqpNewQueueExistingExchangeService-exchange"
                           queueName="amqpNewQueueExistingExchangeService-queue"
                           queueDurable="false"
                           queueExclusive="false"
                           queueAutoDelete="true"
                           connector-ref="amqpAutoAckLocalhostConnector" />
    <test:component />
  </flow>
  
  <flow name="amqpNewQueueRedeclaredExistingExchangeService">
    <!-- Create a new queue and bind it to an existing exchange re-declared in Mule to ensure presence --> 
    <amqp:inbound-endpoint exchangeName="amqpNewQueueRedeclaredExistingExchangeService-exchange"
                           exchangeType="fanout"
                           exchangeAutoDelete="false"
                           exchangeDurable="false"
                           queueName="amqpNewQueueRedeclaredExistingExchangeService-queue"
                           queueDurable="false"
                           queueExclusive="false"
                           queueAutoDelete="true"
                           connector-ref="amqpAutoAckLocalhostConnector" />
    <test:component />
  </flow>
  
  <flow name="amqpNewQueueNewExchangeService">
    <!-- Create a new queue and bind it to a new exchange  --> 
    <amqp:inbound-endpoint exchangeName="amqpNewQueueNewExchangeService-exchange"
                           exchangeType="fanout"
                           exchangeAutoDelete="true"
                           exchangeDurable="false"
                           queueName="amqpNewQueueNewExchangeService-queue"
                           queueDurable="false"
                           queueExclusive="false"
                           queueAutoDelete="true"
                           connector-ref="amqpAutoAckLocalhostConnector" />
    <test:component />
  </flow>
  
  <flow name="amqpClientConsumerTagService">
    <!-- Set a custom consumer tag -->
    <amqp:inbound-endpoint queueName="amqpClientConsumerTagService-queue"
                           consumerTag="test-consumer-tag"
                           connector-ref="amqpAutoAckLocalhostConnector" />
    <test:component />
  </flow>

  <flow name="amqpMuleAckService">
    <!-- Test the Mule-driven acknowledgment of messages -->
    <amqp:inbound-endpoint queueName="amqpMuleAckService-queue"
                           connector-ref="amqpMuleAckLocalhostConnector" />
    <test:component />
  </flow>

  <flow name="amqpManualAckService">
    <!-- Test the manual acknowledgment of messages -->
    <amqp:inbound-endpoint queueName="amqpManualAckService-queue"
                           connector-ref="amqpManualAckLocalhostConnector" />
    <test:component />
    <amqp:acknowledge-message />
  </flow>

  <flow name="amqpManualRejectService">
    <!-- Test the manual rejection of messages -->
    <amqp:inbound-endpoint queueName="amqpManualRejectService-queue"
                           connector-ref="amqpManualAckLocalhostConnector" />
    <test:component />
    <amqp:reject-message requeue="true" />
  </flow>

  <flow name="amqpManualRecoverService">
    <!-- Test the manual recovery of channels -->
    <amqp:inbound-endpoint queueName="amqpManualRecoverService-queue"
                           connector-ref="amqpManualAckLocalhostConnector" />
    <test:component />
    <amqp:recover requeue="true" />
  </flow>
  
  <flow name="amqpExclusiveConsumerService">
    <!-- Use a connector configured for creating exclusive consumers only -->
    <amqp:inbound-endpoint queueName="amqpExclusiveConsumerService-queue"
                           connector-ref="amqpExclusiveLocalhostConnector" />
    <test:component />
  </flow>
  
  <flow name="amqpCustomArgumentsService">
    <amqp:inbound-endpoint exchangeName="amqpCustomArgumentsService-exchange"
                           exchangeType="fanout"
                           exchangeAutoDelete="false"
                           exchangeDurable="false"
                           queueName="amqpCustomArgumentsService-queue"
                           queueDurable="false"
                           queueExclusive="false"
                           queueAutoDelete="true"
                           connector-ref="amqpAutoAckLocalhostConnector">
      <properties>
        <spring:entry key="amqp-exchange.alternate-exchange"
                      value="amqpAlternateExchange-exchange" />
        <spring:entry key="amqp-queue.x-dead-letter-exchange"
                      value="amqpExistingQueueService-queue" />
      </properties>
    </amqp:inbound-endpoint>
    <test:component />
  </flow>
</mule>
