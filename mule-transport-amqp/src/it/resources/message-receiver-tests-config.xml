<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp"
  xmlns:test="http://www.mulesoft.org/schema/mule/test"
  xmlns:spring="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

  <amqp:connector name="amqpReceiverTestAutoAckLocalhostConnector"
        virtualHost="${amqpVirtualHost}"
        username="${amqpUserName}"
        password="${amqpPassword}"
        host="${amqpHost}"
        port="${amqpPort}" />

  <amqp:connector name="amqpReceiverTestMuleAckLocalhostConnector"
        virtualHost="${amqpVirtualHost}"
        username="${amqpUserName}"
        password="${amqpPassword}"
        host="${amqpHost}"
        port="${amqpPort}"
        ackMode="MULE_AUTO" />

  <amqp:connector name="amqpReceiverTestManualAckLocalhostConnector"
        virtualHost="${amqpVirtualHost}"
        username="${amqpUserName}"
        password="${amqpPassword}"
        host="${amqpHost}"
        port="${amqpPort}"
        ackMode="MANUAL" />

  <amqp:connector name="amqpReceiverTestExclusiveLocalhostConnector"
        virtualHost="${amqpVirtualHost}"
        username="${amqpUserName}"
        password="${amqpPassword}"
        host="${amqpHost}"
        port="${amqpPort}"
        exclusiveConsumers="true" />

  <flow name="amqpReceiverTestExistingQueueService">
    <!-- Use an existing queue -->
    <amqp:inbound-endpoint queueName="amqpReceiverTestExistingQueueService-queue"
                           connector-ref="amqpReceiverTestAutoAckLocalhostConnector" />
    <test:component />
  </flow>

  <flow name="amqpReceiverTestUnboundQueueService">
    <!-- Create a public unbound queue -->
    <amqp:inbound-endpoint queueName="amqpReceiverTestUnboundQueueService-queue"
                           queueDurable="true"
                           connector-ref="amqpReceiverTestAutoAckLocalhostConnector" />
    <test:component />
  </flow>

  <flow name="amqpReceiverTestServerNamedQueueExistingExchangeService">
    <!-- Create a private exclusive server-named queue and bind it to an existing exchange --> 
    <amqp:inbound-endpoint exchangeName="amqpReceiverTestServerNamedQueueExistingExchangeService-exchange"
                           connector-ref="amqpReceiverTestAutoAckLocalhostConnector" />
    <test:component />
  </flow>

  <flow name="amqpReceiverTestNewQueueExistingExchangeService">
    <!-- Create a new queue and bind it to an existing exchange  --> 
    <amqp:inbound-endpoint exchangeName="amqpReceiverTestNewQueueExistingExchangeService-exchange"
                           queueName="amqpReceiverTestNewQueueExistingExchangeService-queue"
                           queueDurable="false"
                           queueExclusive="false"
                           queueAutoDelete="true"
                           connector-ref="amqpReceiverTestAutoAckLocalhostConnector" />
    <test:component />
  </flow>
  
  <flow name="amqpReceiverTestNewQueueRedeclaredExistingExchangeService">
    <!-- Create a new queue and bind it to an existing exchange re-declared in Mule to ensure presence --> 
    <amqp:inbound-endpoint exchangeName="amqpReceiverTestNewQueueRedeclaredExistingExchangeService-exchange"
                           exchangeType="fanout"
                           exchangeAutoDelete="false"
                           exchangeDurable="false"
                           queueName="amqpReceiverTestNewQueueRedeclaredExistingExchangeService-queue"
                           queueDurable="false"
                           queueExclusive="false"
                           queueAutoDelete="true"
                           connector-ref="amqpReceiverTestAutoAckLocalhostConnector" />
    <test:component />
  </flow>
  
  <flow name="amqpReceiverTestNewQueueNewExchangeService">
    <!-- Create a new queue and bind it to a new exchange  --> 
    <amqp:inbound-endpoint exchangeName="amqpReceiverTestNewQueueNewExchangeService-exchange"
                           exchangeType="fanout"
                           exchangeAutoDelete="true"
                           exchangeDurable="false"
                           queueName="amqpReceiverTestNewQueueNewExchangeService-queue"
                           queueDurable="false"
                           queueExclusive="false"
                           queueAutoDelete="true"
                           connector-ref="amqpReceiverTestAutoAckLocalhostConnector" />
    <test:component />
  </flow>
  
    
  <flow name="amqpReceiverTestQueueToDeleteService">
    <!-- Create a new queue and bind it to a new exchange  --> 
    <amqp:inbound-endpoint exchangeName="amqpReceiverTestQueueToDeleteService-exchange"
                           exchangeType="fanout"
                           queueName="amqpReceiverTestQueueToDeleteService-queue"
                           connector-ref="amqpReceiverTestAutoAckLocalhostConnector" />
    <test:component />
  </flow>
  
  <flow name="amqpReceiverTestClientConsumerTagService">
    <!-- Set a custom consumer tag -->
    <amqp:inbound-endpoint queueName="amqpReceiverTestClientConsumerTagService-queue"
                           consumerTag="test-consumer-tag"
                           connector-ref="amqpReceiverTestAutoAckLocalhostConnector" />
    <test:component />
  </flow>

  <flow name="amqpReceiverTestMuleAckService">
    <!-- Test the Mule-driven acknowledgment of messages -->
    <amqp:inbound-endpoint queueName="amqpReceiverTestMuleAckService-queue"
                           connector-ref="amqpReceiverTestMuleAckLocalhostConnector" />
    <test:component />
  </flow>

  <flow name="amqpReceiverTestManualAckService">
    <!-- Test the manual acknowledgment of messages -->
    <amqp:inbound-endpoint queueName="amqpReceiverTestManualAckService-queue"
                           connector-ref="amqpReceiverTestManualAckLocalhostConnector" />
    <test:component />
    <amqp:acknowledge-message />
  </flow>

  <flow name="amqpReceiverTestManualRejectService">
    <!-- Test the manual rejection of messages -->
    <amqp:inbound-endpoint queueName="amqpReceiverTestManualRejectService-queue"
                           connector-ref="amqpReceiverTestManualAckLocalhostConnector" />
    <test:component />
    <amqp:reject-message requeue="true" />
  </flow>

  <flow name="amqpReceiverTestManualRecoverService">
    <!-- Test the manual recovery of channels -->
    <amqp:inbound-endpoint queueName="amqpReceiverTestManualRecoverService-queue"
                           connector-ref="amqpReceiverTestManualAckLocalhostConnector" />
    <test:component />
    <amqp:recover requeue="true" />
  </flow>
  
  <flow name="amqpReceiverTestExclusiveConsumerService">
    <!-- Use a connector configured for creating exclusive consumers only -->
    <amqp:inbound-endpoint queueName="amqpReceiverTestExclusiveConsumerService-queue"
                           connector-ref="amqpReceiverTestExclusiveLocalhostConnector" />
    <test:component />
  </flow>
  
  <flow name="amqpReceiverTestCustomArgumentsService">
    <amqp:inbound-endpoint exchangeName="amqpReceiverTestCustomArgumentsService-exchange"
                           exchangeType="fanout"
                           exchangeAutoDelete="false"
                           exchangeDurable="false"
                           queueName="amqpReceiverTestCustomArgumentsService-queue"
                           queueDurable="false"
                           queueExclusive="false"
                           queueAutoDelete="true"
                           connector-ref="amqpReceiverTestAutoAckLocalhostConnector">
      <properties>
        <spring:entry key="amqp-exchange.alternate-exchange"
                      value="amqpReceiverTestAlternateExchange-exchange" />
        <spring:entry key="amqp-queue.x-dead-letter-exchange"
                      value="amqpReceiverTestExistingQueueService-queue" />
      </properties>
    </amqp:inbound-endpoint>
    <test:component />
  </flow>
</mule>
