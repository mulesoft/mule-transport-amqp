<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:amqps="http://www.mulesoft.org/schema/mule/amqps" xmlns:spring="http://www.springframework.org/schema/beans"
    xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/amqps http://www.mulesoft.org/schema/mule/amqps/current/mule-amqps.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <spring:beans>
        <spring:bean name="trustEverythingTrustManager" class="com.rabbitmq.client.TrustEverythingTrustManager" />
    </spring:beans>

    <amqps:amqpmessage-to-object-transformer
        name="a2o" />

    <amqps:object-to-amqpmessage-transformer
        name="o2a" />

    <amqps:connector name="amqpsDefaultSslConnector" />

    <amqps:connector name="amqpsTlsConnector" sslProtocol="${amqpSslProtocol}" />

    <amqps:connector name="amqpsTrustManagerConnector"
        sslTrustManager-ref="trustEverythingTrustManager" />

    <amqps:connector name="amqpsTlsTrustManagerConnector"
        sslProtocol="${amqpSslProtocol}" sslTrustManager-ref="trustEverythingTrustManager" />

    <amqps:connector name="amqpsTlsKeyStores">
        <amqps:ssl-key-store type="jks" storePassword="aPass"
            keyPassword="bPass" />
        <amqps:ssl-trust-store type="jks" storePassword="aPass" />
    </amqps:connector>

    <!-- Declare an exchange, a queue, bind the latter to the former -->
    <amqps:endpoint name="amqpsFullGlobalEndpoint" exchangeName="target-exchange"
        exchangeType="fanout" exchangeDurable="true" exchangeAutoDelete="false"
        queueName="target-queue" queueDurable="true" queueAutoDelete="false"
        queueExclusive="true" routingKey="a.b.c" connector-ref="amqpsDefaultSslConnector" />

    <!-- Use an existing queue -->
    <amqps:endpoint name="amqpsExistingQueueGlobalEndpoint"
        queueName="target-queue" connector-ref="amqpsDefaultSslConnector" />

    <!-- Declare a server-named exclusive queue and bind it to an existing exchange -->
    <amqps:endpoint name="amqpsPrivateQueueGlobalEndpoint"
        exchangeName="target-exchange" routingKey="a.b.c" connector-ref="amqpsDefaultSslConnector" />

    <!-- Declare a queue and bind it to an existing exchange -->
    <amqps:endpoint name="amqpsDeclareQueueGlobalEndpoint"
        exchangeName="target-exchange" queueName="target-queue" queueDurable="true"
        queueAutoDelete="false" queueExclusive="false" routingKey="a.b.c"
        connector-ref="amqpsDefaultSslConnector" />

    <!-- Use an existing exchange -->
    <amqps:endpoint name="amqpsExistingExchangeGlobalEndpoint"
        exchangeName="target-exchange" connector-ref="amqpsDefaultSslConnector" />

    <!-- Declare an exchange -->
    <amqps:endpoint name="amqpsDeclareExchangeGlobalEndpoint"
        exchangeName="target-exchange" exchangeType="topic" exchangeDurable="true"
        exchangeAutoDelete="false" connector-ref="amqpsDefaultSslConnector" />

    <!-- Use an existing queue -->
    <amqps:endpoint name="amqpsTransactedEndpoint" queueName="target-queue"
        connector-ref="amqpsDefaultSslConnector">
        <!-- Transaction, default recover strategy -->
        <amqps:transaction action="ALWAYS_BEGIN" />
    </amqps:endpoint>

    <!-- Set queue and exchange arguments -->
    <amqps:endpoint name="amqpsEndpointWithArguments"
        exchangeName="target-exchange" exchangeType="fanout" exchangeDurable="true"
        exchangeAutoDelete="false" queueName="target-queue" queueDurable="true"
        queueAutoDelete="false" queueExclusive="true" routingKey="a.b.c"
        connector-ref="amqpsDefaultSslConnector">
        <properties>
            <spring:entry key="amqp-exchange.alternate-exchange"
        value="some-exchange" />
            <spring:entry key="amqp-queue.x-dead-letter-exchange"
        value="some-queue" />
        </properties>
    </amqps:endpoint>

    <amqps:endpoint name="amqpsTransactedEndpointWithRecoverStrategy"
        queueName="target-queue" connector-ref="amqpsDefaultSslConnector">
        <!-- Transaction, explicit recover strategy -->
        <amqps:transaction action="ALWAYS_BEGIN"
        recoverStrategy="REQUEUE" />
    </amqps:endpoint>

    <flow name="ackerFlow">
        <amqps:acknowledge-message multiple="true" />
    </flow>
</mule>
